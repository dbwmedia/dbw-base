@use "../variables" as *;

@mixin card(
	$padding: null,
	// Standardwert für den Fall, dass kein Padding übergeben wird
	$border-radius: $borderRadiusM,
	$background-color: $c-body
) {
	border-radius: $border-radius;
	border: $b-border;
	box-shadow:
		0px 0px 1px rgba(0, 0, 0, 0.1),
		0px 2px 24px rgba(0, 0, 0, 0.08);

	// Überprüfen, ob ein `padding`-Wert übergeben wurde
	@if $padding != null {
		padding: $padding;
	} @else {
		@include section-padding;
	}

	background-color: $background-color;
	position: relative;
	transition: $t-transition;

	.gb-button {
		margin-top: auto;
	}

	&:before {
		content: "";
		position: absolute;
		inset: -1px;
		border-radius: $borderRadiusM;
		padding: 2px;
		background: $button-primary;
		-webkit-mask:
			linear-gradient(#fff 0 0) content-box,
			linear-gradient(#fff 0 0);
		-webkit-mask-composite: xor;
		mask-composite: exclude;
		opacity: 0;
	}

	&:hover {
		cursor: pointer;
		border: 1px solid transparent;
		box-shadow:
			0px 0px 2px rgba(0, 0, 0, 0.12),
			0px 8px 32px rgba(0, 144, 199, 0.3);
		transform: translate3d(0, -2.5px, 0);

		&:before {
			opacity: 1; // Zeigt das `before`-Element, um den Rahmen-Effekt zu erstellen
		}
	}

	// Anpassung bei mobilem Breakpoint
	@include mq($until: $mobile) {
		border-radius: $borderRadiusS;
	}
}

@mixin card-light {
	border: $b-border;
	border-radius: $borderRadiusS;

	// Standardmäßig `section-padding`, falls kein Wert explizit angegeben wird
	@include section-padding;
	background-color: #fff;

	// Anpassung bei mobilem Breakpoint
	@include mq($until: $mobile) {
		border-radius: $borderRadiusS;
	}
}
